Schema: 
CREATE TABLE LMS_MEMBERS (
    MEMBER_ID VARCHAR(10) PRIMARY KEY,
    MEMBER_NAME VARCHAR(150),
    CITY VARCHAR(20),
    DATE_REGISTER DATE,
    DATE_EXPIRE DATE,
    MEMBERSHIP_STATUS VARCHAR(15)
);

DESC LMS_MEMBERS

CREATE TABLE LMS_BOOK_DETAILS (
    BOOK_CODE VARCHAR(10) PRIMARY KEY,
    BOOK_TITLE VARCHAR(150),
    CATEGORY VARCHAR(20),
    AUTHOR VARCHAR(30),
    PUBLICATION VARCHAR(50),
    PUBLISH_DATE DATE,
    BOOK_EDITION NUMBER,
    PRICE NUMBER
    RACK_NO VARCHAR(3),
    DATE_ARRIVAL DATE,
    SUPLIER_ID VARCHAR(20)
    -- FOREIGN KEY (SUPLIER_ID) REFERENCES LMS_SUPPLIERS_DETAILS(SUPLIER_ID)
);
DESC LMS_BOOK_DETAILS

CREATE TABLE LMS_SUPPLIERS_DETAILS (
    SUPLIER_ID VARCHAR(20) PRIMARY KEY,
    SUPLIER_NAME VARCHAR(50),
    ADDRESS VARCHAR(50),
    CONTACT BIGINT,
    EMAIL VARCHAR(50)
);

CREATE TABLE LMS_FINE_DETAILS (
    FINE_RANGE VARCHAR(2) PRIMARY KEY,
    FINE_AMOUNT DECIMAL(10,2)
);

CREATE TABLE LMS_BOOK_ISSUE (
    BOOK_ISSUE_NO INT PRIMARY KEY,
    MEMBER_ID VARCHAR(10),
    BOOK_CODE VARCHAR(10),
    DATE_ISSUE DATE,
    DATE_RETURN DATE,
    DATE_RETURNED DATE,
    BOOK_ISSUE_STATUS VARCHAR(20),
    FINE_RANGE VARCHAR(2),
    FOREIGN KEY (MEMBER_ID) REFERENCES LMS_MEMBERS(MEMBER_ID),
    FOREIGN KEY (BOOK_CODE) REFERENCES LMS_BOOK_DETAILS(BOOK_CODE),
    FOREIGN KEY (FINE_RANGE) REFERENCES LMS_FINE_DETAILS(FINE_RANGE)
);
Write a query to display the book code, publication, price and supplier name of the book witch is taken frequently.

1.select member_id, member_name, city, membership_status from lms_members where membership_status = 'permanent';
2.select bd.book_code, bd.publication, bd.price, sd.suplier_name from lms_book_details bd join lms_suppliers_details sd on bd.suplier_id = sd.suplier_id
where bd.book_code in (select book_code from lms_book_issue group by book_code having count(*) > 2);
3.select m.member_id, m.member_name from lms_members m join lms_book_issue bi on m.member_id = bi.member_id where bi.book_code = 'bl000002';
4.select book_code, book_title, author from lms_book_details where author like 'p%';
5.select count(*) as no_of_books from lms_book_details where category = 'java';
6.select category, count(*) as no_of_books from lms_book_details group by category;
7.select count(*) as no_of_books from lms_book_details where publication = 'prentice hall';
8.select bd.book_code, bd.book_title from lms_book_details bd join lms_book_issue bi on bd.book_code = bi.book_code where bi.date_issue = '2012-04-01';
9.select member_id, member_name, date_register, date_expire from lms_members where date_expire < '2013-04-01';
10.select member_id,member_name,date_of_registration,membership_stauts from LMS_MEMBERS where date_register <2012-03-01" and Membership_stauts="Temporary";
11.select member_id, concat(upper(substring(member_name, 1, 1)), lower(substring(member_name, 2))) as Name from lms_members where city = 'CHENNAI' or city = 'DELHI';
12.select distinct concat(book_title, '_is_written_by_', author) as BOOK_WRITTEN_BY from lms_book_details;
13.select avg(price) as AVERAGEPRICE from lms_book_details where category = 'JAVA';
14.select suplier_id, suplier_name, email from lms_suppliers_details where email like '%@gmail.com';
15.select suplier_id, suplier_name, coalesce(cast(contact as char), email, address) as CONTACTDETAILS from lms_suppliers_details;
16. select suplier_id,suplier_name if(Contact IS NULL, "No", "Yes") as PHONENUMAVAILABLE from lms_suppliers_details
17.select m.member_id, m.member_name, m.city, m.membership_status, ifnull(sum(f.fine_amount), 0) as fine from lms_members m join lms_book_issue bi on m.member_id = bi.member_id join lms_fine_details f on bi.fine_range = f.fine_range group by m.member_id;

